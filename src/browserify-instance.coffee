browserify = require 'browserify'
mkdirp = require 'mkdirp'
path = require 'path'
{openSync, writeSync, closeSync} = require 'fs'
uglify = require 'uglify-js'

class BrowserifyInstance
  constructor: (@data) ->
    options =
      debug: !@data.main.production
    for own k,v of @data.instanceOptions
      options[k] = v
    if @data.bundleOptions
      # Backward compatibility with old configs
      for own k,v of @data.bundleOptions
        options[k] = v

    @callbacks = []

    @__w = browserify "./#{@data.entry}", options

    for transform in @data.transforms
      @__w.transform(transform)

    @data.onBrowserifyLoad?.apply this, [@__w]

    null

  handleUpdate: (callback) =>
    if callback?
      @callbacks.push callback

    if @running
      return

    callbacks = @callbacks
    @callbacks = []

    callback = (error) =>
      for cb in callbacks
        setImmediate cb.bind(this, error)

      if @callbacks.length > 0
        setImmediate this.handleUpdate.bind(this)

      return

    @running = true
    @data.onBeforeBundle?.apply this, [@__w]

    @__w.bundle (error, js) =>
      if not js?
        error ?= new Error('Browserify Error')

      if error
        @running = false
        if not @data.main.watching
          throw error

        console.error 'Browserify Error', error
        callback error
        return

      # Browserify > 5.0.0 gives us a buffer object, must convert it to string.
      js = js.toString()

      # Since the files run through browserify are not defined in
      # `brunchConfig.files.javascripts`, they are not picked up by the
      # installed optimizers.
      if @data.main.production
        minified = uglify.minify js, fromString: true
        js = minified.code

      # Likewise, we don't get folders generated by Brunch.
      outputFile = "#{@data.main.publicPath}/#{@data.compiledPath}"
      mkdirp.sync path.dirname(outputFile)
      fd = openSync outputFile, 'w+'
      writeSync fd, js
      closeSync fd

      @running = false
      @data.onAfterBundle?.apply this, arguments
      @data.main.__autoReloadServer?.sendMessage 'page'

      callback()
      return

module.exports = {
  BrowserifyInstance
}
